# http://www.scons.org/doc/production/HTML/scons-user.html
# This is: test/unit/SConscript

import os
import glob
import shutil

# Import dependencies
Import('env', 'casm_lib', 'casm', 'build_lib_paths')

lenv = env.Clone()

# remove existing test directories
test_dir = 'test_projects'
if os.path.exists(test_dir):
  shutil.rmtree(test_dir)
if not os.path.exists(test_dir):
  os.makedirs(test_dir)

# include paths
candidates = [
  env['INCDIR'], 
  env.include_path(env['BOOST_PREFIX'], 'boost'),
  os.getcwd()
]
cpppath = [x for x in candidates if x is not None]

lenv.Replace(CPPPATH = cpppath)

common_obj = lenv.Object('Common.cpp')
unit_obj = lenv.Object('unit_test.cpp')
test_src = glob.glob('*/*_test.cpp')
test_name = [ os.path.splitext(os.path.basename(src))[0] for src in test_src]
test_obj = [lenv.Object(x) for x in test_src]

linkflags = ""
if lenv['PLATFORM'] == 'darwin':
  linkflags = ['-rpath', '@loader_path/../../../lib']
else:
  linkflags = ['-Wl,--rpath=\\$$ORIGIN/../../../lib', '-z', 'origin']


### The combined unit_test that runs all individual tests
unit_test = lenv.Program(os.path.join(lenv['UNIT_TEST_BINDIR'],'unit_test'), 
                        [unit_obj, test_obj, common_obj],
                        LINKFLAGS=linkflags,
                        LIBPATH=build_lib_paths,
                        LIBS=[
                          lenv['boost_unit_test_framework'], 
                          lenv['boost_system'], 
                          lenv['boost_filesystem'],
                          lenv['boost_regex'],
                          lenv['boost_chrono'],
                          lenv['dl'],
                          'casm'])

# Execute 'scons unit' to compile & run all unit tests
lenv.Alias('unit', unit_test, "printenv && " + unit_test[0].abspath + " --log_level=test_suite --catch_system_errors=no")
AlwaysBuild(unit_test)

if 'unit' in COMMAND_LINE_TARGETS:
  env['IS_TEST'] = 1


### Compile and run individual tests
# Execute 'scons Motif' or 'scons Structure', etc. to compile & run individual unit tests

# list of dependencies for a particular test
depends = {
  "App" : [casm_lib, casm],
  "EnumeratorPlugin" : [casm_lib, casm],
  "QueryPlugin" : [casm_lib, casm]
}

# list of output files that need to be cleaned for a particular test
to_clean = {
  "Structure" : glob.glob('crystallography/*_out') + ['crystallography/POS1_prim.json'],
  "Clexulator" : ['clex/test_Clexulator.o', 'clex/test_Clexulator.so'],
  "App" : ['App/FCC_ternary', 'App/ZrO']
}

# list tests that need '--catch_system_errors=no"
no_catch = [
  "App",
  "EnumeratorPlugin",
  "QueryPlugin"
]

Depends(unit_test, [val for val in depends.itervalues()])
Clean(unit_test,  [val for val in to_clean.itervalues()])

for i, src_name in enumerate(test_name):
  
  sname = src_name[:-5]
  
  test = lenv.Program(os.path.join(lenv['UNIT_TEST_BINDIR'], src_name), 
                       [unit_obj, common_obj, test_obj[i]],
                       LIBPATH=build_lib_paths,
                       LINKFLAGS=linkflags,
                       LIBS=[
                         lenv['boost_unit_test_framework'], 
                         lenv['boost_system'], 
                         lenv['boost_filesystem'],
                         lenv['boost_regex'],
                         lenv['dl'],
                         'casm'])
  
  if sname in depends:
    Depends(test, depends[sname])
  
  if sname in to_clean:
    Clean(test, to_clean[sname])
  
  # set command line options for running the unit tests
  if sname in no_catch:
    lenv.Alias(sname, test, test[0].abspath + " --log_level=test_suite --catch_system_errors=no")
  else:
    lenv.Alias(sname, test, test[0].abspath + " --log_level=test_suite")
  AlwaysBuild(test)
    
  if sname in COMMAND_LINE_TARGETS:
    env['IS_TEST'] = 1
